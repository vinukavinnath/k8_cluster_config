apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: kube-system
  labels:
    k8s-app: filebeat
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: filebeat
rules:
- apiGroups: [""]
  resources:
  - pods
  - namespaces
  - nodes
  verbs: ["get", "watch", "list"]
- apiGroups: ["apps"]
  resources:
  - deployments
  - replicasets
  verbs: ["get", "watch", "list"]
- apiGroups: ["batch"]
  resources:
  - jobs
  verbs: ["get", "watch", "list"]
- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs: ["get", "create", "update"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: filebeat
  # should be the namespace where filebeat is running
  namespace: kube-system
  labels:
    k8s-app: filebeat
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: filebeat-kubeadm-config
  namespace: kube-system
  labels:
    k8s-app: filebeat
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    resourceNames:
      - kubeadm-config
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: filebeat
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: filebeat
    namespace: kube-system
roleRef:
  kind: Role
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: filebeat-kubeadm-config
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: filebeat
    namespace: kube-system
roleRef:
  kind: Role
  name: filebeat-kubeadm-config
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: kube-system
  labels:
    k8s-app: filebeat
data:
  filebeat.yml: |-
    filebeat.inputs:
    - type: filestream
      id: kubernetes-container-logs
      paths:
        - /var/log/containers/*.log
      parsers:
        - container: ~
      start_position: beginning
      prospector:
        scanner:
          fingerprint.enabled: true
          fingerprint.length: 64
          fingerprint.offset: 0
          symlinks: true
          check_interval: 1s
      file_identity.fingerprint: ~
      close.on_state_change.renamed: true
      close.reader.on_eof: false
      ignore_older: 24h
      harvester_limit: 100
      close.on_state_change.inactive: 1m


    processors:
      - add_cloud_metadata: ~
      - add_host_metadata: ~

      # Add Kubernetes metadata processor
      - add_kubernetes_metadata:
          host: ${NODE_NAME}
          matchers:
          - logs_path:
              logs_path: "/var/log/containers/"
          default_indexers.enabled: true
          default_matchers.enabled: true
          labels.dedot: true
          annotations.dedot: true
          
      # Custom processor to extract deployment info and create data stream fields
      - script:
          lang: javascript
          id: extract_deployment_info
          source: >
            function process(event) {
              var k8s = event.Get("kubernetes");
              if (k8s && k8s.labels) {
                // Try different label keys commonly used for deployment names
                var deploymentName = k8s.labels["deployment"] || k8s.labels["app"] || k8s.labels["app.kubernetes.io/name"] || k8s.labels["k8s-app"] || "unknown";
                var namespace = k8s.namespace
                
                // Clean deployment name (remove special characters, convert to lowercase)
                deploymentName = deploymentName.replace(/[^a-zA-Z0-9-]/g, "-").toLowerCase();
                namespace = namespace.toLowerCase();
                
                // Set fields for data stream configuration
                event.Put("k8s_deployment_name", deploymentName);
                event.Put("k8s_namespace", namespace);
                event.Put("data_stream_dataset", deploymentName);
                event.Put("data_stream_namespace", namespace);
              }
            }

    output.elasticsearch:
      hosts: ['${ELASTICSEARCH_HOST:elasticsearch}:${ELASTICSEARCH_PORT:9200}']
      protocol: "https"
      username: ${ELASTICSEARCH_USERNAME}
      password: ${ELASTICSEARCH_PASSWORD}
      ssl:
        certificate_authorities: ["/etc/ssl/certs/http_ca.crt"]
        verification_mode: certificate
      
      # Configure data streams
      index: "logs-%{[data_stream_dataset]}-%{[data_stream_namespace]}"
      
      # Enable data stream support
      allow_older_versions: false
      
    # Setup index template for data streams
    setup.template.enabled: true
    setup.template.name: "logs-template"
    setup.template.pattern: "logs-*-*"
    setup.template.settings:
      index.number_of_shards: 1
      index.number_of_replicas: 1
      index.lifecycle.name: "logs-policy"
    
    # Configure ILM policy
    setup.ilm.enabled: true
    setup.ilm.rollover_alias: "logs"
    setup.ilm.pattern: "logs-*"
    setup.ilm.policy: "logs-policy"

    logging.level: info
    logging.to_files: true
    logging.files:
      path: /var/log/filebeat
      name: filebeat
      keepfiles: 7
      permissions: 0644

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: kube-system
  labels:
    k8s-app: filebeat
spec:
  selector:
    matchLabels:
      k8s-app: filebeat
  template:
    metadata:
      labels:
        k8s-app: filebeat
    spec:
      serviceAccountName: filebeat
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat-wolfi:9.0.3
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        env:
        - name: ELASTICSEARCH_HOST
          value: "192.168.56.30"
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: ELASTICSEARCH_USERNAME
          value: elastic
        - name: ELASTICSEARCH_PASSWORD
          value: qGW=EyPVcAe8nq==qoDk
        - name: ELASTIC_CLOUD_ID
          value:
        - name: ELASTIC_CLOUD_AUTH
          value:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
          # If using Red Hat OpenShift uncomment this:
          #privileged: true
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: elasticsearch-ca-cert
          mountPath: /etc/ssl/certs/http_ca.crt
          subPath: http_ca.crt
          readOnly: true
      volumes:
      - name: config
        configMap:
          defaultMode: 0640
          name: filebeat-config
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          # When filebeat runs as non-root user, this directory needs to be writable by group (g+w).
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
      - name: elasticsearch-ca-cert
        secret:
          secretName: elasticsearch-ca-cert
          defaultMode: 0644
